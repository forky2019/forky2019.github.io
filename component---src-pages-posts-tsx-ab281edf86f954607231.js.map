{"version":3,"sources":["webpack:///./src/model/PostModel.ts","webpack:///./src/components/link.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./src/components/postItem.tsx","webpack:///./src/pages/posts.tsx","webpack:///./src/constants/color.ts"],"names":["PostModel","node","frontmatter","Object","assign","this","GatsbyLink","styled","Link","color","black","GastbyLink","to","props","source","excluded","key","i","target","sourceKeys","keys","length","indexOf","Container","div","white","BorderBox","css","ContentBox","Title","h2","SubtitleBox","Subtitle","span","gray75","DateText","MetaContainer","ReadMore","blue","PostItem","post","title","path","date","subtitle","useState","over","setOver","onMouseEnter","onMouseLeave","pageQuery","Post","posts","data","allMarkdownRemark","edges","map","gray"],"mappings":"6LAEqBA,EAOnB,SAAYC,GAAW,IACbC,EAAgBD,EAAhBC,YACRC,OAAOC,OAAOC,KAAMH,I,wCCNlBI,EAAaC,YAAOC,QAAV,uEAAGD,CAAH,+CAELE,IAAMC,OAYFC,EAJI,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,GAAOC,ECfd,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAahB,OAAOiB,KAAKN,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWE,OAAQJ,IACjCD,EAAMG,EAAWF,GACbF,EAASO,QAAQN,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDGuC,WAC9C,OAAO,kBAACZ,EAAD,eAAYM,GAAIA,GAAQC,KEV3BU,EAAYhB,IAAOiB,IAAV,sEAAGjB,CAAH,2GAMOE,IAAMgB,OAGtBC,EAAYnB,IAAOiB,IAAV,sEAAGjB,CAAH,6EAMX,SAACM,GAAD,OACAA,EAAMJ,OACNkB,YADA,0BAEsBd,EAAMJ,UAG1BmB,EAAarB,IAAOiB,IAAV,uEAAGjB,CAAH,kFAMVsB,EAAQtB,IAAOuB,GAAV,kEAAGvB,CAAH,sDAKLwB,EAAcxB,IAAOiB,IAAV,wEAAGjB,CAAH,qBAGXyB,EAAWzB,IAAO0B,KAAV,qEAAG1B,CAAH,8BAEHE,IAAMyB,QAEXC,EAAW5B,IAAO0B,KAAV,qEAAG1B,CAAH,8BACHE,IAAMyB,QAGXE,EAAgB7B,IAAOiB,IAAV,0EAAGjB,CAAH,MAEb8B,EAAW9B,IAAOiB,IAAV,qEAAGjB,CAAH,uCAGHE,IAAM6B,MAsCFC,EA/BE,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,KACVC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,KAAMC,EAAmBH,EAAnBG,KAAMC,EAAaJ,EAAbI,SADS,EAEZC,oBAAS,GAA1BC,EAF6B,KAEvBC,EAFuB,KAIpC,OACE,kBAACxB,EAAD,CACEyB,aAAc,WACZD,GAAQ,IAEVE,aAAc,WACZF,GAAQ,KAGV,kBAAC,EAAD,CAAMnC,GAAI8B,GACR,kBAAChB,EAAD,CAAWjB,MAAOqC,EAAOrC,IAAM6B,KAAO7B,IAAMgB,OAC1C,kBAACG,EAAD,KACE,kBAACC,EAAD,KAAQY,GACR,kBAACV,EAAD,KACGa,GAAY,kBAACZ,EAAD,KAAWY,IAE1B,kBAACR,EAAD,KACE,kBAACD,EAAD,KAAWQ,GACX,kBAACN,EAAD,KAAWS,GAAQ,kDCzDpBI,EAAY,YAiBVC,UApCF,SAAC,GAAa,IAKnBC,EALmB,EAAXC,KAEZC,kBAAqBC,MAGSC,KAAI,YAAc,IAAXvD,EAAW,EAAXA,KACrC,OAAO,IAAID,EAAUC,MAGvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKwC,MAAM,SACVW,EAAMI,KAAI,SAAChB,GACV,OAAO,kBAAC,EAAD,CAAUA,KAAMA,U,kCCZhB/B,IARD,CACZgB,MAAO,UACPf,MAAO,UACPwB,OAAQ,UACRuB,KAAM,UACNnB,KAAM","file":"component---src-pages-posts-tsx-ab281edf86f954607231.js","sourcesContent":["import { INode, IPost } from \"../constants/types\";\n\nexport default class PostModel implements IPost {\n  title;\n  path;\n  date;\n  subtitle?;\n  primate?;\n\n  constructor(node: any) {\n    const { frontmatter } = node;\n    Object.assign(this, frontmatter);\n  }\n}\n","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport color from \"../constants/color\";\n\nconst GatsbyLink = styled(Link)`\n  width: 100%;\n  color: ${color.black};\n  text-decoration: none;\n`;\n\ninterface Props {\n  to: string;\n}\n\nconst GastbyLink = ({ to, ...props }: Props) => {\n  return <GatsbyLink to={to} {...props}></GatsbyLink>;\n};\n\nexport default GastbyLink;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { useState, CSSProperties } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport color from \"../constants/color\";\nimport PostModel from \"../model/PostModel\";\nimport Link from \"./link\";\n\nconst Container = styled.div`\n  display: flex;\n  height: 170px;\n  border: 1px solid;\n  padding: 10px;\n  margin: 10px 0px 10px 0px;\n  background-color: ${color.white};\n`;\n\nconst BorderBox = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  flex-direction: row;\n  padding: 10px;\n  ${(props) =>\n    props.color &&\n    css`\n      border: 1px solid ${props.color};\n    `}\n`;\nconst ContentBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: space-between;\n`;\nconst Title = styled.h2`\n  padding: 0;\n  margin-bottom: 0;\n  border-bottom-width: 0;\n`;\nconst SubtitleBox = styled.div`\n  flex-grow: auto;\n`;\nconst Subtitle = styled.span`\n  font-size: 16px;\n  color: ${color.gray75};\n`;\nconst DateText = styled.span`\n  color: ${color.gray75};\n  font-size: 13px;\n`;\nconst MetaContainer = styled.div``;\n\nconst ReadMore = styled.div`\n  height: 30px;\n  float: right;\n  color: ${color.blue};\n`;\n\ninterface Props {\n  post: PostModel;\n}\n\nconst PostItem = ({ post }: Props) => {\n  const { title, path, date, subtitle } = post;\n  const [over, setOver] = useState(false);\n\n  return (\n    <Container\n      onMouseEnter={() => {\n        setOver(true);\n      }}\n      onMouseLeave={() => {\n        setOver(false);\n      }}\n    >\n      <Link to={path}>\n        <BorderBox color={over ? color.blue : color.white}>\n          <ContentBox>\n            <Title>{title}</Title>\n            <SubtitleBox>\n              {subtitle && <Subtitle>{subtitle}</Subtitle>}\n            </SubtitleBox>\n            <MetaContainer>\n              <DateText>{date}</DateText>\n              <ReadMore>{over && <span>Read More</span>}</ReadMore>\n            </MetaContainer>\n          </ContentBox>\n        </BorderBox>\n      </Link>\n    </Container>\n  );\n};\n\nexport default PostItem;\n","import React from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { graphql } from \"gatsby\";\nimport PostModel from \"../model/PostModel\";\nimport PostItem from \"../components/postItem\";\n\nconst Post = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges },\n  } = data;\n\n  const posts: Array<any> = edges.map(({ node }) => {\n    return new PostModel(node);\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"post\" />\n      {posts.map((post) => {\n        return <PostItem post={post} />;\n      })}\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            subtitle\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Post;\n","const color = {\n  white: \"#ffffff\",\n  black: \"#292931\",\n  gray75: \"#757575\",\n  gray: \"#36313d\",\n  blue: \"#1167b1\",\n};\n\nexport default color;\n"],"sourceRoot":""}