{"version":3,"sources":["webpack:///./src/model/postModel.ts","webpack:///./src/constants/color.ts","webpack:///./src/components/organisms/postItem.tsx","webpack:///./src/pages/posts.tsx"],"names":["PostModel","node","frontmatter","Object","assign","this","Color","white","black","gray75","imageStyle","width","height","display","flexDirection","alignItems","Container","styled","div","ImgBox","img","ContentBox","Title","h2","SubtitleBox","Subtitle","span","DateText","MetaContainer","ReadMore","PostItem","post","title","path","date","subtitle","thumbnail","useState","over","setOver","onMouseEnter","onMouseLeave","style","paddingLeft","to","src","pageQuery","Post","posts","data","allMarkdownRemark","edges","map"],"mappings":"8LAEqBA,EAQnB,SAAYC,GAAW,IACbC,EAAgBD,EAAhBC,YACRC,OAAOC,OAAOC,KAAMH,I,oCCNTI,EAND,CACZC,MAAO,UACPC,MAAO,UACPC,OAAQ,W,yjCCOV,IA+BMC,EAA4B,CAChCC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,MACfC,WAAY,UAGRC,EAAYC,IAAOC,IAAV,IAKOZ,EAAMC,OAEtBY,EAASF,IAAOG,IAAV,KAKNC,EAAaJ,IAAOC,IAAV,KAMVI,EAAQL,IAAOM,GAAV,KAILC,EAAcP,IAAOC,IAAV,KAGXO,EAAWR,IAAOS,KAAV,IAEHpB,EAAMG,QAEXkB,EAAWV,IAAOS,KAAV,IACHpB,EAAMG,QAGXmB,EAAgBX,IAAOC,IAAV,KAEbW,EAAWZ,IAAOC,IAAV,KAKCY,EA/EE,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,KACVC,EAA2CD,EAA3CC,MAAOC,EAAoCF,EAApCE,KAAMC,EAA8BH,EAA9BG,KAAMC,EAAwBJ,EAAxBI,SAAUC,EAAcL,EAAdK,UADD,EAEZC,oBAAS,GAA1BC,EAF6B,KAEvBC,EAFuB,KAIpC,OACE,kBAACvB,EAAD,CACEwB,aAAc,WACZD,GAAQ,IAEVE,aAAc,WACZF,GAAQ,IAEVG,MAAON,GAAa,CAAEO,YAAa,KAEnC,kBAAC,IAAD,CAAMC,GAAIX,EAAMS,MAAON,GAAa1B,GACjC0B,GAAa,kBAACjB,EAAD,CAAQ0B,IAAKT,IAC3B,kBAACf,EAAD,KACE,kBAACC,EAAD,KAAQU,GACR,kBAACR,EAAD,KACGW,GAAY,kBAACV,EAAD,KAAWU,IAE1B,kBAACP,EAAD,KACE,kBAACD,EAAD,KAAWO,GACX,kBAACL,EAAD,KAAWS,GAAQ,iDCPlBQ,EAAY,YAkBVC,UArCF,SAAC,GAAa,IAKnBC,EALmB,EAAXC,KAEZC,kBAAqBC,MAGSC,KAAI,YAAc,IAAXnD,EAAW,EAAXA,KACrC,OAAO,IAAID,EAAUC,MAGvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK+B,MAAM,SACVgB,EAAMI,KAAI,SAACrB,GACV,OAAO,kBAAC,EAAD,CAAUA,KAAMA","file":"component---src-pages-posts-tsx-810a44db45e1452b106f.js","sourcesContent":["import { INode, IPost } from \"../constants/types\";\n\nexport default class PostModel implements IPost {\n  title;\n  path;\n  date;\n  subtitle?;\n  thumbnail?;\n  primate?;\n\n  constructor(node: any) {\n    const { frontmatter } = node;\n    Object.assign(this, frontmatter);\n    // this.thumbnail = require(`${this.thumbnail}`);\n    // console.log(this.thumbnail);\n  }\n}\n","const Color = {\n  white: \"#ffffff\",\n  black: \"#000000\",\n  gray75: \"#757575\",\n};\n\nexport default Color;\n","import React, { useState, CSSProperties } from \"react\";\nimport styled from \"styled-components\";\nimport PostModel from \"../../model/postModel\";\nimport Link from \"../atom/link\";\nimport Color from \"../../constants/color\";\n\ninterface Props {\n  post: PostModel;\n}\n\nconst PostItem = ({ post }: Props) => {\n  const { title, path, date, subtitle, thumbnail } = post;\n  const [over, setOver] = useState(false);\n\n  return (\n    <Container\n      onMouseEnter={() => {\n        setOver(true);\n      }}\n      onMouseLeave={() => {\n        setOver(false);\n      }}\n      style={thumbnail && { paddingLeft: 10 }}\n    >\n      <Link to={path} style={thumbnail && imageStyle}>\n        {thumbnail && <ImgBox src={thumbnail} />}\n        <ContentBox>\n          <Title>{title}</Title>\n          <SubtitleBox>\n            {subtitle && <Subtitle>{subtitle}</Subtitle>}\n          </SubtitleBox>\n          <MetaContainer>\n            <DateText>{date}</DateText>\n            <ReadMore>{over && <span>Read More</span>}</ReadMore>\n          </MetaContainer>\n        </ContentBox>\n      </Link>\n    </Container>\n  );\n};\n\nconst imageStyle: CSSProperties = {\n  width: \"100%\",\n  height: \"100%\",\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n};\n\nconst Container = styled.div`\n  height: 150px;\n  border: 1px solid;\n  padding: 10px 20px 10px 20px;\n  margin: 10px 0px 10px 0px;\n  background-color: ${Color.white};\n`;\nconst ImgBox = styled.img`\n  width: 130px;\n  height: 130px;\n  margin-right: 10px;\n`;\nconst ContentBox = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst Title = styled.h2`\n  padding: 0;\n  margin-bottom: 0;\n`;\nconst SubtitleBox = styled.div`\n  flex-grow: auto;\n`;\nconst Subtitle = styled.span`\n  font-size: 16px;\n  color: ${Color.gray75};\n`;\nconst DateText = styled.span`\n  color: ${Color.gray75};\n  font-size: 13px;\n`;\nconst MetaContainer = styled.div``;\n\nconst ReadMore = styled.div`\n  height: 30px;\n  float: right;\n`;\n\nexport default PostItem;\n","import React from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { graphql } from \"gatsby\";\nimport PostModel from \"../model/postModel\";\nimport PostItem from \"../components/organisms/postItem\";\n\nconst Post = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges },\n  } = data;\n\n  const posts: Array<any> = edges.map(({ node }) => {\n    return new PostModel(node);\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"post\" />\n      {posts.map((post) => {\n        return <PostItem post={post} />;\n      })}\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            path\n            title\n            subtitle\n            thumbnail\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Post;\n"],"sourceRoot":""}